"""
目前学习的内容只是Python的冰山一角，但是这些内容以及该足够我们来构建程序中的逻辑，
现在必须要做的一件事情就是尝试用所学的只是取解决现实中的问题，换句话说就是锻炼自己把用人类自然 语言描述的算法(解决问题的方法和步骤)编译成Python代码的能力
而这件事必须通过大量的联系才能达成
"""


"""
寻找水仙花数
说明：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数
它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3=153$。
"""
for num in range(100, 1000):
    low = num % 10
    mid = num // 10 % 10
    high = num // 100 % 10
    if num == low ** 3 + mid ** 3 + high ** 3:
        print(num)

"""
将正整数反转
例如：12345变成54321
"""
num = int(input("num = "))
reversed_num = 0
while num > 0:
    reversed_num = reversed_num * 10 + num % 10
    num //= 10
print(reversed_num)


"""
百钱百鸡的问题
说明：百钱百鸡是我国古代数学家张丘建在《算经》一书中提出的数学问题：
鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？
翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？
"""
for x in range(0, 20):
    for y in range(0, 33):
        z = 100 - x - y
        if 5 * x + 3 * y + z / 3 == 100:
            print('公鸡: %d只, 母鸡: %d只, 小鸡: %d只' % (x, y, z))
"""
上面使用的方法叫做穷举法，也称为暴力搜索法，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。
这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。
"""

