"""
数据类型
整型：2X有int和long两种 但是这种区分对Python来说意义不大，因此在3X中整数只有int一种了
浮点型：浮点是也就是小数
字符串型：字符串是以单引号或者双引号括起来的任意文本，比如'Hello'和"Hello"，字符串还是有原始字符串表示法、字节字符串表示法、Unicode字符出啊表示法，而且还可以写成多行形式，使用三个单引号或者双引号括起来
布尔型：只有True和False 表示真或者假
复数型：形如3+5j，跟数学上的复数表示一样，唯一不同的是虚部的i换成了j，实际上，这个类型并不常用
"""

"""
变量命名
每个变量我们都要给它起一个名字，来标识变量的唯一性以及后续的调用还有可读性
硬性规则：
    变量名由字母、数字和下划线组成，但是不能以数字开头
    大小写敏感(大写的A和小写的a是两个不同的变量)
    不要跟关键字（有特殊含义的单词）和系统保留字（如函数、模块等的名字）冲突
PEP8要求：
    用小写字母拼写，多个单词用下划线连接
    受保护的实例属性用单个下划线开头
    私有的实例用两个下划线开头
"""

"""
变量的使用
使用变量保存数据实现加减乘乘除
"""
a = 321
b = 21
print(a + b)  # 342
print(a - b)  # 300
print(a * b)  # 6741
print(a / b)  # 15.285714285714286

"""
使用type函数对变量的类型进行检查
"""
c = 10
d = "Hello"
e = 12.32
f = True
g = 1 + 5j
print(type(c))  # <class 'int'>
print(type(d))  # <class 'str'>
print(type(e))  # <class 'float'>
print(type(f))  # <class 'bool'>
print(type(g))  # <class 'complex'>

"""
可以使用Python内置的函数对变量类型进行转换
int()：将一个数值或者字符串转换为整数，可以指定进制
float()：将一个字符串转换为浮点数
str()：将指定的对象转换为字符串形式，可以指定编码
char()：将整数转换成编码对应的字符
ord()：将字符转换成对应的编码(整数)
"""
print(type(int("321")))

"""
通过键盘输入两个整数来实现对两个整数的算术运算
使用input()函数获取键盘输入(字符串)
使用int()函数将输入的字符串转换成整数
使用print()函数输出带占位符的字符串
"""
textA = int(input('a = '))
textB = int(input('b = '))
print("%d + %d = %d " % (textA, textB, textA + textB))
print('%d - %d = %d' % (textA, textB, textA - textB))
print('%d * %d = %d' % (textA, textB, textA * textB))
print('%d / %d = %f' % (textA, textB, textA / textB))
print('%d // %d = %d' % (textA, textB, textA // textB))
print('%d %% %d = %d' % (textA, textB, textA % textB))
print('%d ** %d = %d' % (textA, textB, textA ** textB))
"""
说明：上面的print函数中输出的字符串使用了占位符语法
    其中%d是整数的占位符，%f是小数的占位符，%%表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成%%）
    字符串之后的%后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。 """

"""
运算符
Python支持多种运算符，下面按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级是多个运算符同时出出现，先做什么运算然后在做什么运算
运算符	    描述
[] [:]	    下标，切片
**	        指数
~ + -	    按位取反, 正负号
* / % //	乘，除，模，整除
+ -	        加，减
>> <<	    右移，左移
&	        按位与
^ |	        按位异或，按位或
<= < > >=	小于等于，小于，大于，大于等于
== !=	    等于，不等于
is is not	身份运算符
in not in	成员运算符
not or and	逻辑运算符
= += -= *= /= %= //= **= &= `	= ^= >>= <<=`
说明： 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。
"""

"""
赋值运算符
赋值运算符应该是最常见的运算符，它的作用是将右边的值赋值给左边的变量，下面的例子演示了赋值运算符和复合运算符的使用
"""
h = 10
i = 3
h += i  # 相当于 h = h + b
h *= h + 2  # 相当于 h = h * (h + 2)
print(h)

"""
比较运算符和逻辑运算符
比较运算符有的时候也称为关系运算符，包括==、！=、<、>、<=、>=、>=
=和==不相同不要把他们两个搞混了，前者是赋值运算符后者是比较运算符

逻辑运算符有三个，分别是and、or和not。
    
    and字面意识就是"而且"
    所以and运算符会连接两个布尔值，如果两个布尔值都是True，那么运算的结果就是True 左右两边的布尔值又一个是False，最终运算结果就是False
    如果and桌边的布尔值是False不管右边的布尔值是什么，最终的结果都是False，所以在做运算的时候右边的值就会被跳过(短路处理)，这也就意味着在and运算符桌边为False的时候，右边的表达式根本不会执行。
    等同于Java中的&&
    
    or字面意思是"或者"
    所以or运算符也会连接两个不布尔值，如果哦两个布尔值有任意一个是True，那么最终的结果就是True。当然，or运算符也是有短路功能的，在它左边的布尔值为True的情况下，右边的表达式根本不会执行。
    等同于Java中的||
    
    not运算符的后面会跟上一个布尔值，它的作用的得到与该布尔值相反的值，也就是说，后面的布尔值如果是True运算结果就是False，而后面的布尔值如果是False则运算结果就是True。则为取反效果。
    等同于Java中的!
"""
flag0 = 1 == 1
flag1 = 3 > 2
flag2 = 2 < 1
flag3 = flag1 and flag2
flag4 = flag1 or flag2
flag5 = not (1 != 2)
print(flag0)  # True
print(flag1)  # True
print(flag2)  # False
print(flag3)  # False
print(flag4)  # True
print(flag5)  # False

"""
华氏温度转换为摄氏温度
提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \div 1.8$。
"""
c1 = float(input("请输入华氏温度："))
c2 = (c1 - 32) / 1.8
print("%d.1华氏度 = %.1f摄氏度" % (c1, c2))

"""
输入圆的半径计算周长和面积
"""
radius = float(input("请输入圆的半径："))
perimeter = 3.14159 * (radius * 2)
area = 3.14159 * (radius * radius)
print("圆的周长：%.2f" % perimeter)
print("圆的面积：%.2f" % area)

"""
判断年份是否闰年
"""
year = int(input("请输入年份："))
is_leap = year % 4 == 0 and year % 100 != 0 or year % 400 == 0
print(is_leap)
